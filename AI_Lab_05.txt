import random
def print_board(board):
    for row in board:
        print(" ".join(str(x) for x in row))
def create_board(state):
    board = [[0 for _ in range(8)] for _ in range(8)]
    for col, row in enumerate(state):
        board[row][col] = 1
    return board
def calculate_attacks(state):
    attacks = 0
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            if state[i] == state[j]:
                attacks += 1
            if abs(state[i] - state[j]) == j - i:
                attacks += 1
    return attacks
def get_neighbors(state):
    neighbors = []
    n = len(state)
    for col in range(n):
        for row in range(n):
            if row != state[col]:
                neighbor = list(state)
                neighbor[col] = row
                neighbors.append(neighbor)
    return neighbors
def hill_climbing(initial_state):
    current_state = initial_state
    current_attacks = calculate_attacks(current_state)
    while True:
        neighbors = get_neighbors(current_state)
        best_neighbor = current_state
        best_neighbor_attacks = current_attacks
        for neighbor in neighbors:
            neighbor_attacks = calculate_attacks(neighbor)
            if neighbor_attacks < best_neighbor_attacks:
                best_neighbor = neighbor
                best_neighbor_attacks = neighbor_attacks
        if best_neighbor_attacks >= current_attacks:
            return current_state, current_attacks
        current_state = best_neighbor
        current_attacks = best_neighbor_attacks
def solve_8_queens():
    initial_state = [random.randint(0, 7) for _ in range(8)]
    print("Initial State: ", initial_state)
    initial_board = create_board(initial_state)
    print_board(initial_board)
    solution_state, attacks = hill_climbing(initial_state)
    print("\nSolution State: ", solution_state)
    solution_board = create_board(solution_state)
    print_board(solution_board)
    print("Number of attacks: ", attacks)
solve_8_queens()